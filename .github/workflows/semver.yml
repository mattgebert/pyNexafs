# Based on Python Semantic Release (PSR) and PYPI (Python Package Index) as of July-2025
# [1] https://python-semantic-release.readthedocs.io/en/stable/configuration/automatic-releases/github-actions.html#examples
# [2] https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

name: Python üêç Semantic Versioning
run-name: ${{ github.actor }} - Python üêç Semantic Versioning

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.ref_name }}-release
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Run as a prerelease?'
        required: true
        type: boolean
        default: true
      prerelease_token:
        description: 'Token for prerelease'
        required: false
        type: choice
        options:
          - alpha
          - beta
          - rc
        default: 'beta'
  push:

permissions:
  contents: read

jobs:
  semver-release:
    name: Run Python üêç Semantic Version to stamp distribution üì¶
    # Only run this job on the master account.
    runs-on: ubuntu-latest
    # defaults: # https://github.com/actions/upload-artifact/issues/232#issuecomment-1065422577
    #   run:
    #     working-directory: ./pyNexafs
    permissions:
      contents: write
    outputs:
      released: ${{ steps.is_released.outputs.released }}

    steps:
      - name: Use workflow inputs for pre-release
        shell: bash
        if: ${{ github.event == 'workflow_dispatch' }}
        run: |
          echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_ENV
          echo "prerelease_token=${{ github.event.inputs.prerelease_token }}" >> $GITHUB_ENV
      - name: Set default value for pre-release
        shell: bash
        if: ${{ github.event != 'workflow_dispatch' }}
        run: |
          echo "prerelease=true" >> $GITHUB_ENV
          echo "prerelease_token=beta" >> $GITHUB_ENV
      - name: Display pre-release input
        shell: bash
        run: |
          echo "Python SemVer pre-release?: $prerelease"
      # Note: We checkout the repository at the branch that triggered the workflow
      # with the entire history to ensure to match PSR's release branch detection
      # and history evaluation.
      # However, we forcefully reset the branch to the workflow sha because it is
      # possible that the branch was updated while the workflow was running. This
      # prevents accidentally releasing un-evaluated changes.
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Evaluate | Verify upstream has NOT changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running. This is important
        # because we are committing a version change (--commit). You may omit this step
        # if you have 'commit: false' in your configuration.
        #
        # You may consider moving this to a repo script and call it from this step instead
        # of writing it in-line.
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      # - name: Delete Previous | Distribution Artifacts
      #   uses: actions/delete-artifact@v4 ???
      #   with:
      #     name: distribution-artifacts
      #     path: dist
      - name: Action | Semantic Version Release
        id: release
        # Adjust tag with desired version if applicable.
        # https://python-semantic-release.readthedocs.io/en/stable/configuration/automatic-releases/github-actions.html
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
          build: true
          prerelease: ${{ env.prerelease == 'true' }}
          prerelease_token: ${{ env.prerelease_token }}
          changelog: true
          verbosity: 2
          no_operation_mode: ${{ github.repository_owner != 'xraysoftmat'}}

      - name: Env | Check if released and log conditionals
        id: is_released
        run: |
          echo "Success: ${{ steps.release.outcome }} ;  ${{ steps.release.outcome == 'success' }}"
          echo "Ownership: ${{ github.repository_owner }} ; ${{ github.repository_owner == 'xraysoftmat' }}"
          echo "Released: ${{ steps.release.outputs.released }}"
          echo "Branch: ${{ github.ref }}; ${{ github.ref == 'refs/heads/main' }}"
          echo "released=${{ steps.release.outcome && github.ref == 'refs/heads/main' && steps.release.outputs.released && github.repository_owner == 'xraysoftmat' && steps.release.outcome == 'success' }}" >> "$GITHUB_OUTPUT"

      - name: Display | Release Information
        if: |
          success() && steps.is_released.outputs.released
        run: |
          echo "Process Release: ${{ steps.is_released.outputs.released }}"
          echo "Release Tag: ${{ steps.release.outputs.tag }}"
          echo "Release Version: ${{ steps.release.outputs.version }}"
          echo "Release Branch: ${{ github.ref_name }}"
          echo "Release Prerelease: ${{ env.prerelease }}"

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.2.0
        if: |
          success() && steps.is_released.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        if: |
          success() && steps.is_released.outputs.released == 'true'
        with:
          name: distribution-artifacts
          path: ./dist
          overwrite: true
          if-no-files-found: error

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.2.0
        if: |
          success() && steps.is_released.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

  pypi-deploy:
    # 1. Separate out the deploy step from the publish step to run each step at
    #    the least amount of token privilege
    # 2. Also, deployments can fail, and its better to have a separate job if you need to retry
    #    and it won't require reversing the release.
    name: Publish Python üêç distribution üì¶ release to PyPI
    runs-on: ubuntu-latest
    needs: semver-release # match the job name above
    if: |
      success() && needs.semver-release.outputs.released == 'true'
    defaults:
      run:
        working-directory: ./pyNexafs
    # Only run this job on the master account, only publish to PyPI on tag pushes
    permissions:
      contents: read
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/p/pyNexafs

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: distribution-artifacts # Match the name used in the upload step
          path: pyNexafs/dist # Match the path used in the upload step

      - name: Publish package distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: pyNexafs/dist


  ### Not currently using TestPyPI, but can be enabled if needed.
  # testpypi-deploy:
  #   name: Publish Python üêç distribution üì¶ to TestPyPI
  #   runs-on: ubuntu-latest
  #   # Only run this job on the master account,  only publish to TestPyPI on tag pushes
  #   needs: semver-release # match the job name above
  #   if: |
  #     success() && needs.semver-release.outputs.released == 'true'
  #   environment:
  #     name: testpypi
  #     url: https://test.pypi.org/p/pyNexafs

  #   permissions:
  #     contents: read
  #     id-token: write  # IMPORTANT: mandatory for trusted publishing

  #   steps:
  #     - name: Setup | Download Build Artifacts
  #       uses: actions/download-artifact@v4
  #       id: artifact-download
  #       with:
  #         name: distribution-artifacts # Match the name used in the upload step
  #         path: pyNexafs/dist # Match the path used in the upload step

  #     - name: Publish distribution üì¶ to TestPyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         repository-url: https://test.pypi.org/legacy/
  #         packages-dir: pyNexafs/dist
