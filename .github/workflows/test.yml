name: pyNexafs tests

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [all]
  pull_request:
    branches: [all]

jobs:
  test:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.13", "3.12", "3.11", "3.10"]
        # sphinx-version:
        #   ["sphinx==6.0", "sphinx==6.2", "sphinx==7.0", "sphinx>=7.3"]
        include:
            - os: Windows
              python-version: "3.13"
            - os: MacOS
              python-version: "3.13"
            # sphinx-version: "sphinx" # version shouldn't really matter here
    defaults:
      run:
        shell: bash -eo pipefail {0} # Fail on any error (-e), fail on any failed command in a pipeline.
    steps:
      - uses: actions/checkout@v4

      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup environment
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install coveralls
          python -m pip list
        #   python -m pip install ${{ matrix.sphinx-version }}

      - name: Install
        run: |
          python -m pip install . --group dev --group doc
          pip list

      - name: Run test suite
        run: |
          pytest -v --pyargs .

      - name: Test coverage
        run: |
          coverage run --source=pyNexafs -m pytest tests/
          coveralls
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #   - name: Make sure CLI works
    #     run: |
    #       numpydoc render numpydoc.tests.test_main._capture_stdout
    #       echo '! numpydoc render numpydoc.tests.test_main._invalid_docstring' | bash
    #       numpydoc validate numpydoc.tests.test_main._capture_stdout
    #       echo '! numpydoc validate numpydoc.tests.test_main._docstring_with_errors' | bash

    #   - name: Setup for doc build
    #     run: |
    #       sudo apt-get update
    #       sudo apt install texlive texlive-latex-extra latexmk dvipng
    #     if: runner.os == 'Linux'

    #   - name: Build documentation
    #     run: |
    #       make -C doc html SPHINXOPTS="-nT"
    #       make -C doc latexpdf SPHINXOPTS="-nT"
    #     if: runner.os == 'Linux'

#   prerelease:
#     runs-on: ${{ matrix.os }}-latest
#     strategy:
#       matrix:
#         os: [ubuntu]
#         python-version: ["3.11", "3.12", "3.13"]
#     steps:
#       - uses: actions/checkout@v4

#       - name: Python setup
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ matrix.python-version }}

#       - name: Setup environment
#         run: |
#           python -m pip install --upgrade pip wheel setuptools
#           python -m pip install codecov
#           python -m pip list

#       - name: Install
#         run: |
#           python -m pip install --pre .[test,doc]
#           pip list

#       - name: Run test suite
#         run: |
#           pytest -v --pyargs numpydoc

#       - name: Test coverage
#         run: |
#           codecov

#       - name: Make sure CLI works
#         run: |
#           numpydoc render numpydoc.tests.test_main._capture_stdout
#           echo '! numpydoc render numpydoc.tests.test_main._invalid_docstring' | bash
#           numpydoc validate numpydoc.tests.test_main._capture_stdout
#           echo '! numpydoc validate numpydoc.tests.test_main._docstring_with_errors' | bash

#       - name: Setup for doc build
#         run: |
#           sudo apt-get update
#           sudo apt install texlive texlive-latex-extra latexmk dvipng

#       - name: Build documentation
#         run: |
#           make -C doc html SPHINXOPTS="-nT"
#           make -C doc latexpdf SPHINXOPTS="-nT"
