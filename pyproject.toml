## What system to build the project with? I.e. Setuptools, Wheel, Poetry, etc.
## Using `setuptools` here.

[build-system]
    requires = [
        "setuptools-scm >= 6.4.2", # For versioning
        "setuptools >= 61.2.0", # Minimum version for pyproject.toml support
        "uv >= 0.7.20" # Current version as of 2025-July
    ]
    build-backend = "setuptools.build_meta"

[project]
    # Project information
    name = "pyNexafs"
    version = "0.1.0-rc.1"
    description = "A package for processing and analysing NEXAFS data."
    readme = "README.md"
    license = {file = "LICENSE"}
    keywords = ["NEXAFS", "XANES", "Near", "Edge", "X-ray", "Absorption", "Fine", "Structure", "Spectroscopy", "Optical Data", "XAS", "Synchrotron"]
    authors = [
        {name = "Matthew Gebert", email="matthew.gebert@monash.edu"},
        ]
    maintainers = [
        {name = "Matthew Gebert", email="matthew.gebert@monash.edu"},
    ]

    # Project compatibility:
    requires-python = ">=3.11"
    dependencies = [
        "numpy",
        "overrides", # for type hinting
        "scipy",
        "xdrlib3", # function bindings for reading binary data from mda files
    ]

[project.urls]
    # Website, documentation and other continuous integration URLS.
    code = "https://github.com/xraysoftmat/pyNexafs"
    documentation = "https://pyNexafs.readthedocs.io/en/latest/"

[dependency-groups]
# Dependency groups for optional dependencies. Requires pip >= 25.1
dev = [
    {include-group = "gui"}, # Include GUI dependencies in dev
    {include-group = "docs"}, # Include documentation dependencies in dev
    "pre-commit",
    "pytest",
    "python-semantic-release",
    "commitizen",
    "commitlint",
    "periodictable >= 2.0.2", # Due to changes in neutron element as zeroth element.
    "black",
]

docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "numpydoc",
]

gui = [
    "matplotlib",
    "pandas",
    "pyqt6",
    "pyyaml",
]

[tool.setuptools.packages.find]
exclude = ["docs*", "tests*"]

# [tool.setuptools.packages.find] # All the following settings are optional:
#     where = ["."]  # Root directory
#     include = ["pyNexafs*"]
#     exclude = []

[tool.numpydoc_validation]
    checks = [
        "all",   # report on all checks, except the below
        "EX01",
        "SA01",
        "ES01",
        "GL08", # TODO: ignore docstring check until numpydoc 1.9.0 is released (where constructors are supported).
        "PR02", # TODO: ignore parameter check until numpydoc 1.9.0 is released (where properties setter methods are supported).
    ]

    exclude = [
        '^tests*$',
        '.*/gui/.*',
    ]

    override_SS05 = [
        "^Process",
        "^Nexafs",
        "^Xanes",
        "^Xas",
        "",
    ]

[tool.commitizen]
name = "cz_conventional_commits"
version_files = ["pyproject.toml:project.version"]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
# build_command = "python -m build --sdist --wheel ."
commit_parser = "conventional"
build_command = "pip install uv && uv build --sdist --wheel . --out-dir dist"
commit_message = """
chore(release): Release `core@{version}` [skip ci]
Automatically generated by python-semantic-release
"""
allow_zero_version = true

[tool.semantic_release.branches.beta]
# Matches branches with the prefixes 'feat/', 'fix/', or 'perf/'.
match = "^(feat|fix|perf)/.+"
prerelease = true
prerelease_token = "beta"

[tool.semantic_release.changelog.default_templates]
changelog_file = "docs/CHANGELOG.rst"
output_format = "rst" # or "md" for Markdown format

[tool.semantic_release.changelog]
# Recommended patterns for conventional commits parser that is scope aware
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''',
]

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
# other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
# allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
# default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

# build_command_env = []
# assets = []
# commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
# commit_parser = "conventional"
# logging_use_named_masks = false
# major_on_zero = true
# allow_zero_version = false
# repo_dir = "C:\\Github\\pyNexafs"
# no_git_verify = false
# tag_format = "v{version}"

# [tool.semantic_release.branches.main]
# match = "(main|master)"
# prerelease_token = "rc"
# prerelease = false

# [tool.semantic_release.changelog]
# changelog_file = ""
# exclude_commit_patterns = []
# mode = "update"
# insertion_flag = "<!-- version list -->"
# template_dir = "templates"

# [tool.semantic_release.changelog.default_templates]
# changelog_file = "CHANGELOG.md"
# output_format = "md"
# mask_initial_release = true

# [tool.semantic_release.changelog.environment]
# block_start_string = "{%"
# block_end_string = "%}"
# variable_start_string = "{{"
# variable_end_string = "}}"
# comment_start_string = "{#"
# comment_end_string = "#}"
# trim_blocks = false
# lstrip_blocks = false
# newline_sequence = "\n"
# keep_trailing_newline = false
# extensions = []
# autoescape = false

# [tool.semantic_release.commit_author]
# env = "GIT_COMMIT_AUTHOR"
# default = "semantic-release <semantic-release>"


# [tool.semantic_release.remote]
# name = "origin"
# type = "github"
# ignore_token_for_push = false
# insecure = false

# [tool.semantic_release.publish]
# dist_glob_patterns = ["dist/*"]
# upload_to_vcs_release = true
